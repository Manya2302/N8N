{"file_contents":{"README.md":{"content":"# EduManage - School Management System\n\nA comprehensive educational management platform with structured Teacher and Admin dashboards, integrating WhatsApp automation, Google Workspace, and HubSpot for complete school administration.\n\n## üéØ Features\n\n### üë®‚Äçüè´ Teacher Dashboard\n- **Class Scheduling & Meetings** - Arrange sessions and manage timetable display\n- **Student Attendance Management** - Daily attendance tracking with automated WhatsApp notifications\n- **Marks & Progress Tracking** - Enter weekly exam marks and update progress reports\n- **Parent Communication Tools** - WhatsApp reminders via AiSensy integration with GPT-powered report summaries\n- **Assignments & Exams** - Create and manage assignments with automated notifications\n- **Student Profile Access** - View and update assigned students' academic records\n\n### üõ†Ô∏è Admin Dashboard\n- **Teacher Management** - Add/edit teacher profiles and performance oversight\n- **Complete Oversight** - Access to all teacher dashboards and system-wide monitoring\n- **System-Wide Announcements** - Publish school-wide notices and event notifications\n- **User Role Management** - Manage admin and teacher accounts\n- **School-Wide Reports & Analytics** - Integration with Google Sheets + Data Studio\n- **Fee Management Oversight** - Track payments and automated reminders\n- **Transport Management** - School bus tracking and route information\n- **Digital Library & Resources** - Manage eBooks and study materials\n\n## üöÄ Tech Stack\n\n### Frontend\n- **React** with Vite\n- **JavaScript/JSX** (no TypeScript)\n- **Tailwind CSS** + **shadcn/ui** components\n- **Wouter** for routing\n- **TanStack React Query** for data fetching\n- **React Hook Form** + **Zod** for form validation\n\n### Backend\n- **Node.js** + **Express**\n- **PostgreSQL** with **Drizzle ORM** (Supabase hosted)\n- **Argon2** for password hashing\n- **JWT** for authentication\n- **Express-session** for session management\n- **Helmet** for security headers\n- **Rate limiting** and **CSRF protection**\n\n### Integrations\n- **AiSensy** WhatsApp API for automated messaging\n- **Google Sheets API v4** for data synchronization\n- **Google Calendar API** for scheduling\n- **HubSpot CRM API** for lead management\n- **OpenAI GPT-5** for report summaries\n- **Pabbly Connect** for workflow automation\n\n## üìã Prerequisites\n\n- Node.js 18+ and npm\n- PostgreSQL database (Supabase account recommended)\n- API keys for integrations (WhatsApp, Google Workspace, HubSpot, OpenAI)\n\n## üõ†Ô∏è Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone <repository-url>\n   cd edumanage\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Environment Configuration**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Update `.env` with your configuration:\n   - Database URL from Supabase\n   - API keys for all integrations\n   - JWT and session secrets\n   - Security configuration\n\n4. **Database Setup**\n   ```bash\n   # Push database schema\n   npm run db:push\n   ```\n\n5. **Start the application**\n   ```bash\n   npm run dev\n   ```\n\n   The application will be available at `http://localhost:5000`\n\n## üîß Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run check` - TypeScript type checking\n- `npm run db:push` - Push database schema changes\n\n## üîê Authentication & Security\n\n### First-Time Setup\n1. Access the application at `http://localhost:5000`\n2. Use the **Admin Setup** tab to create your first admin account\n3. Login with admin credentials to access the admin dashboard\n4. Create teacher accounts through the Teacher Management section\n\n### Security Features\n- **Argon2** password hashing\n- **JWT** access tokens with refresh token rotation\n- **CSRF** protection with double-submit cookies\n- **Rate limiting** for API endpoints\n- **Session-based** authentication with secure cookies\n- **Audit logging** for all sensitive operations\n- **Role-based access control** (Admin/Teacher)\n- **Security headers** via Helmet\n\n## üìä Database Schema\n\n### Core Tables\n- **users** - Admin and teacher accounts\n- **students** - Student information and parent contacts\n- **modules** - Subject/course management\n- **attendance** - Daily attendance records\n- **grades** - Exam results and progress tracking\n- **assignments** - Homework and project management\n- **announcements** - School-wide communications\n- **audit_logs** - System activity tracking\n\n### Relationships\n- Teachers can manage multiple students\n- Students belong to specific teachers (or unassigned for admin)\n- Modules are owned by teachers\n- Attendance and grades are linked to students and teachers\n\n## üîó API Integration Guide\n\n### WhatsApp Automation (AiSensy)\n```javascript\n// Automated attendance notifications\nPOST /api/attendance ‚Üí triggers WhatsApp message to parents\n","size_bytes":4877},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Educational Management System\n\n## Overview\nA comprehensive educational management system with React frontend and Node.js backend, featuring n8n automation integration for school-parent-student communication.\n\n## Project Architecture\n- **Frontend**: React with Vite (JavaScript only, no TypeScript)\n- **Backend**: Node.js + Express\n- **Database**: Supabase PostgreSQL\n- **Authentication**: Session-based with JWT tokens and Argon2 password hashing\n- **Integration**: n8n AI automation for WhatsApp notifications\n\n## Core Features\n1. **Attendance Management** - Track student attendance\n2. **Grade Management** - Weekly exam marks and progress tracking\n3. **Communication Hub** - Announcements, notices, schedules\n4. **Academic Calendar** - Exam schedules, timetables, holidays\n5. **Fee Management** - Online payment tracking and receipts\n6. **Library System** - Book borrowing and return management\n7. **Transport Management** - Bus routes and scheduling\n8. **Health Records** - Medical information and checkups\n9. **Assignment Portal** - Digital homework submission\n10. **Progress Analytics** - Student performance insights\n\n## Dashboard Structure\n- **Teacher Dashboard**: Class management, meetings, assignments, student progress\n- **Admin Dashboard**: Teacher management, student enrollment, system settings, comprehensive reports\n\n## User Roles\n- **Students**: View grades, assignments, attendance, schedules\n- **Parents**: Monitor child progress, receive notifications, pay fees\n- **Teachers**: Manage classes, grade assignments, schedule meetings\n- **Admins**: System administration, user management, reports\n\n## Database Connection\n- Using Supabase PostgreSQL with connection string provided\n- Parameterized queries only for security\n- Environment variables for all sensitive data\n\n## Authentication System\n- Session-based authentication (not Replit Auth)\n- JWT access + refresh tokens\n- Argon2 password hashing\n- HttpOnly, Secure cookies for refresh tokens\n\n## Recent Changes\n- Initial project setup planned\n- Database schema design in progress\n- Authentication system architecture defined\n\n## User Preferences\n- Use JavaScript only (no TypeScript)\n- Session-based authentication preferred\n- Integration with n8n automation required\n- Teacher and Admin dashboards prioritized","size_bytes":2284},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.js":{"content":"import jwt from 'jsonwebtoken';\nimport argon2 from 'argon2';\nimport crypto from 'crypto';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key';\nconst JWT_EXPIRES_IN = '15m';\nconst REFRESH_TOKEN_EXPIRES_IN = '7d';\n\nexport class AuthService {\n  static async hashPassword(password) {\n    return await argon2.hash(password);\n  }\n\n  static async verifyPassword(hashedPassword, plainPassword) {\n    try {\n      return await argon2.verify(hashedPassword, plainPassword);\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static generateAccessToken(user) {\n    return jwt.sign(\n      { \n        userId: user.id, \n        email: user.email, \n        role: user.role \n      },\n      JWT_SECRET,\n      { expiresIn: JWT_EXPIRES_IN }\n    );\n  }\n\n  static generateRefreshToken() {\n    return crypto.randomBytes(64).toString('hex');\n  }\n\n  static verifyAccessToken(token) {\n    try {\n      return jwt.verify(token, JWT_SECRET);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  static getRefreshTokenExpiry() {\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 7); // 7 days\n    return expiryDate;\n  }\n\n  static async hashRefreshToken(token) {\n    return await argon2.hash(token);\n  }\n\n  static async verifyRefreshToken(hashedToken, plainToken) {\n    try {\n      return await argon2.verify(hashedToken, plainToken);\n    } catch (error) {\n      return false;\n    }\n  }\n}\n\nexport function generateCSRFToken() {\n  return crypto.randomBytes(32).toString('hex');\n}\n","size_bytes":1506},"server/index.ts":{"content":"import express from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err, _req, res, _next) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1953},"server/middleware.js":{"content":"import helmet from 'helmet';\nimport cors from 'cors';\nimport rateLimit from 'express-rate-limit';\nimport { AuthService, generateCSRFToken } from './auth.js';\n\nexport function setupSecurityMiddleware(app) {\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  \n  // Security headers\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        scriptSrc: isDevelopment \n          ? [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"] \n          : [\"'self'\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        connectSrc: isDevelopment \n          ? [\"'self'\", \"ws:\", \"wss:\"] \n          : [\"'self'\"]\n      }\n    }\n  }));\n\n  // CORS\n  app.use(cors({\n    origin: process.env.FRONTEND_URL || 'http://localhost:5000',\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-CSRF-Token']\n  }));\n\n  // Rate limiting\n  const limiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 100, // limit each IP to 100 requests per windowMs\n    message: {\n      error: 'Too many requests from this IP, please try again later.'\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  app.use('/api/', limiter);\n\n  // Stricter rate limiting for auth endpoints\n  const authLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // limit each IP to 5 requests per windowMs\n    message: {\n      error: 'Too many authentication attempts, please try again later.'\n    }\n  });\n\n  app.use('/api/auth/', authLimiter);\n}\n\nexport function authMiddleware(storage) {\n  return async (req, res, next) => {\n    try {\n      const authHeader = req.headers.authorization;\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        return res.status(401).json({ error: 'No token provided' });\n      }\n\n      const token = authHeader.substring(7);\n      const decoded = AuthService.verifyAccessToken(token);\n      \n      if (!decoded) {\n        return res.status(401).json({ error: 'Invalid token' });\n      }\n\n      const user = await storage.getUser(decoded.userId);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ error: 'User not found or inactive' });\n      }\n\n      req.user = user;\n      next();\n    } catch (error) {\n      console.error('Auth middleware error:', error);\n      res.status(401).json({ error: 'Authentication failed' });\n    }\n  };\n}\n\nexport function roleMiddleware(allowedRoles) {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n\n    next();\n  };\n}\n\nexport function csrfMiddleware(req, res, next) {\n  if (req.method === 'GET') {\n    return next();\n  }\n\n  const token = req.headers['x-csrf-token'];\n  const sessionToken = req.session?.csrfToken;\n\n  if (!token || !sessionToken || token !== sessionToken) {\n    return res.status(403).json({ error: 'Invalid CSRF token' });\n  }\n\n  next();\n}\n\nexport function auditMiddleware(storage) {\n  return async (req, res, next) => {\n    const originalSend = res.send;\n    \n    res.send = function(data) {\n      // Log the action after response is sent\n      setImmediate(async () => {\n        try {\n          const action = `${req.method} ${req.path}`;\n          const meta = {\n            params: req.params,\n            query: req.query,\n            statusCode: res.statusCode,\n          };\n          \n          const userId = req.user?.id || null;\n          const ipAddress = req.ip || req.connection.remoteAddress;\n          \n          await storage.createAuditLog(userId, action, meta, ipAddress);\n        } catch (error) {\n          console.error('Audit logging error:', error);\n        }\n      });\n      \n      return originalSend.call(this, data);\n    };\n    \n    next();\n  };\n}\n","size_bytes":4090},"server/routes.js":{"content":"import express from \"express\";\nimport { createServer } from \"http\";\nimport session from \"express-session\";\nimport { z } from \"zod\";\nimport { \n  insertUserSchema, \n  insertStudentSchema, \n  insertModuleSchema,\n  insertAttendanceSchema,\n  insertGradeSchema,\n  insertAssignmentSchema,\n  insertAnnouncementSchema \n} from \"@shared/schema\";\nimport { storage } from \"./storage\";\nimport { AuthService, generateCSRFToken } from \"./auth.js\";\nimport { \n  setupSecurityMiddleware, \n  authMiddleware, \n  roleMiddleware, \n  csrfMiddleware, \n  auditMiddleware \n} from \"./middleware.js\";\n\nexport async function registerRoutes(app) {\n  // Connect to database\n  await storage.connect();\n\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'your-super-secret-session-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      sameSite: 'strict'\n    }\n  }));\n\n  // Setup security middleware\n  setupSecurityMiddleware(app);\n\n  // Apply audit logging to all routes\n  app.use('/api', auditMiddleware(storage));\n\n  // CSRF token endpoint\n  app.get('/api/csrf-token', (req, res) => {\n    const token = generateCSRFToken();\n    req.session.csrfToken = token;\n    res.json({ csrfToken: token });\n  });\n\n  // Authentication routes\n  const loginSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(6),\n  });\n\n  app.post('/api/auth/register-admin', csrfMiddleware, async (req, res) => {\n    try {\n      // Check if any admin exists\n      const existingUsers = await storage.getTeachers();\n      const adminExists = existingUsers.some(user => user.role === 'admin');\n      \n      if (adminExists) {\n        return res.status(400).json({ error: 'Admin already exists' });\n      }\n\n      const { email, password } = loginSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: 'User already exists' });\n      }\n\n      const passwordHash = await AuthService.hashPassword(password);\n      const user = await storage.createUser({\n        email,\n        passwordHash,\n        role: 'admin',\n        isActive: true,\n      });\n\n      await storage.createAuditLog(user.id, 'admin_registered', { email }, req.ip);\n\n      res.status(201).json({ \n        message: 'Admin created successfully',\n        user: { id: user.id, email: user.email, role: user.role }\n      });\n    } catch (error) {\n      console.error('Register admin error:', error);\n      res.status(400).json({ error: error.message || 'Registration failed' });\n    }\n  });\n\n  app.post('/api/auth/login', csrfMiddleware, async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      const isValidPassword = await AuthService.verifyPassword(user.passwordHash, password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      // Generate tokens\n      const accessToken = AuthService.generateAccessToken(user);\n      const refreshToken = AuthService.generateRefreshToken();\n      const refreshTokenHash = await AuthService.hashRefreshToken(refreshToken);\n      const expiresAt = AuthService.getRefreshTokenExpiry();\n\n      // Store refresh token\n      await storage.createRefreshToken(user.id, refreshTokenHash, expiresAt);\n\n      // Set refresh token as httpOnly cookie\n      res.cookie('refreshToken', refreshToken, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'strict',\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      });\n\n      await storage.createAuditLog(user.id, 'login', { email }, req.ip);\n\n      res.json({\n        accessToken,\n        user: { id: user.id, email: user.email, role: user.role }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ error: error.message || 'Login failed' });\n    }\n  });\n\n  app.post('/api/auth/refresh', async (req, res) => {\n    try {\n      const refreshToken = req.cookies.refreshToken;\n      if (!refreshToken) {\n        return res.status(401).json({ error: 'No refresh token' });\n      }\n\n      const refreshTokenHash = await AuthService.hashRefreshToken(refreshToken);\n      const tokenData = await storage.getRefreshToken(refreshTokenHash);\n      if (!tokenData) {\n        return res.status(401).json({ error: 'Invalid refresh token' });\n      }\n\n      const user = await storage.getUser(tokenData.userId);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ error: 'User not found' });\n      }\n\n      const newAccessToken = AuthService.generateAccessToken(user);\n      \n      res.json({\n        accessToken: newAccessToken,\n        user: { id: user.id, email: user.email, role: user.role }\n      });\n    } catch (error) {\n      console.error('Refresh token error:', error);\n      res.status(401).json({ error: 'Token refresh failed' });\n    }\n  });\n\n  app.post('/api/auth/logout', authMiddleware(storage), async (req, res) => {\n    try {\n      const refreshToken = req.cookies.refreshToken;\n      if (refreshToken) {\n        const refreshTokenHash = await AuthService.hashRefreshToken(refreshToken);\n        await storage.deleteRefreshToken(refreshTokenHash);\n      }\n\n      res.clearCookie('refreshToken');\n      await storage.createAuditLog(req.user.id, 'logout', {}, req.ip);\n      \n      res.json({ message: 'Logged out successfully' });\n    } catch (error) {\n      console.error('Logout error:', error);\n      res.status(500).json({ error: 'Logout failed' });\n    }\n  });\n\n  // User routes\n  app.get('/api/users/me', authMiddleware(storage), async (req, res) => {\n    res.json({ user: { id: req.user.id, email: req.user.email, role: req.user.role } });\n  });\n\n  // Teacher management routes (Admin only)\n  app.get('/api/teachers', authMiddleware(storage), roleMiddleware(['admin']), async (req, res) => {\n    try {\n      const teachers = await storage.getTeachers();\n      res.json(teachers.map(t => ({ id: t.id, email: t.email, isActive: t.isActive, createdAt: t.createdAt })));\n    } catch (error) {\n      console.error('Get teachers error:', error);\n      res.status(500).json({ error: 'Failed to fetch teachers' });\n    }\n  });\n\n  app.post('/api/teachers', authMiddleware(storage), roleMiddleware(['admin']), csrfMiddleware, async (req, res) => {\n    try {\n      const data = insertUserSchema.extend({ role: z.literal('teacher') }).parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(data.email);\n      if (existingUser) {\n        return res.status(400).json({ error: 'Teacher already exists' });\n      }\n\n      const passwordHash = await AuthService.hashPassword(data.password);\n      const teacher = await storage.createUser({\n        ...data,\n        passwordHash,\n        role: 'teacher',\n      });\n\n      res.status(201).json({ \n        id: teacher.id, \n        email: teacher.email, \n        isActive: teacher.isActive, \n        createdAt: teacher.createdAt \n      });\n    } catch (error) {\n      console.error('Create teacher error:', error);\n      res.status(400).json({ error: error.message || 'Failed to create teacher' });\n    }\n  });\n\n  app.patch('/api/teachers/:id', authMiddleware(storage), roleMiddleware(['admin']), csrfMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      const teacher = await storage.updateUser(id, updates);\n      if (!teacher) {\n        return res.status(404).json({ error: 'Teacher not found' });\n      }\n\n      res.json({ id: teacher.id, email: teacher.email, isActive: teacher.isActive });\n    } catch (error) {\n      console.error('Update teacher error:', error);\n      res.status(400).json({ error: 'Failed to update teacher' });\n    }\n  });\n\n  app.delete('/api/teachers/:id', authMiddleware(storage), roleMiddleware(['admin']), csrfMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteUser(id);\n      \n      if (!success) {\n        return res.status(404).json({ error: 'Teacher not found' });\n      }\n\n      res.json({ message: 'Teacher deleted successfully' });\n    } catch (error) {\n      console.error('Delete teacher error:', error);\n      res.status(500).json({ error: 'Failed to delete teacher' });\n    }\n  });\n\n  // Student routes\n  app.get('/api/students', authMiddleware(storage), async (req, res) => {\n    try {\n      const teacherId = req.user.role === 'teacher' ? req.user.id : undefined;\n      const students = await storage.getStudents(teacherId);\n      res.json(students);\n    } catch (error) {\n      console.error('Get students error:', error);\n      res.status(500).json({ error: 'Failed to fetch students' });\n    }\n  });\n\n  app.post('/api/students', authMiddleware(storage), csrfMiddleware, async (req, res) => {\n    try {\n      const data = insertStudentSchema.parse(req.body);\n      \n      // If teacher, set teacherId to current user\n      if (req.user.role === 'teacher') {\n        data.teacherId = req.user.id;\n      }\n\n      const student = await storage.createStudent(data);\n      res.status(201).json(student);\n    } catch (error) {\n      console.error('Create student error:', error);\n      res.status(400).json({ error: error.message || 'Failed to create student' });\n    }\n  });\n\n  app.patch('/api/students/:id', authMiddleware(storage), csrfMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n\n      // If teacher, ensure they can only update their own students\n      if (req.user.role === 'teacher') {\n        const existingStudent = await storage.getStudent(id);\n        if (!existingStudent || existingStudent.teacherId !== req.user.id) {\n          return res.status(403).json({ error: 'Access denied' });\n        }\n      }\n\n      const student = await storage.updateStudent(id, updates);\n      if (!student) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n\n      res.json(student);\n    } catch (error) {\n      console.error('Update student error:', error);\n      res.status(400).json({ error: 'Failed to update student' });\n    }\n  });\n\n  app.delete('/api/students/:id', authMiddleware(storage), csrfMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      // If teacher, ensure they can only delete their own students\n      if (req.user.role === 'teacher') {\n        const existingStudent = await storage.getStudent(id);\n        if (!existingStudent || existingStudent.teacherId !== req.user.id) {\n          return res.status(403).json({ error: 'Access denied' });\n        }\n      }\n\n      const success = await storage.deleteStudent(id);\n      if (!success) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n\n      res.json({ message: 'Student deleted successfully' });\n    } catch (error) {\n      console.error('Delete student error:', error);\n      res.status(500).json({ error: 'Failed to delete student' });\n    }\n  });\n\n  // Module routes\n  app.get('/api/modules', authMiddleware(storage), async (req, res) => {\n    try {\n      const teacherId = req.user.role === 'teacher' ? req.user.id : undefined;\n      const modules = await storage.getModules(teacherId);\n      res.json(modules);\n    } catch (error) {\n      console.error('Get modules error:', error);\n      res.status(500).json({ error: 'Failed to fetch modules' });\n    }\n  });\n\n  app.post('/api/modules', authMiddleware(storage), roleMiddleware(['teacher']), csrfMiddleware, async (req, res) => {\n    try {\n      const data = insertModuleSchema.parse({ ...req.body, teacherId: req.user.id });\n      const module = await storage.createModule(data);\n      res.status(201).json(module);\n    } catch (error) {\n      console.error('Create module error:', error);\n      res.status(400).json({ error: error.message || 'Failed to create module' });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', authMiddleware(storage), async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats(req.user.id, req.user.role);\n      res.json(stats);\n    } catch (error) {\n      console.error('Get dashboard stats error:', error);\n      res.status(500).json({ error: 'Failed to fetch dashboard stats' });\n    }\n  });\n\n  // Audit logs (Admin only)\n  app.get('/api/audit', authMiddleware(storage), roleMiddleware(['admin']), async (req, res) => {\n    try {\n      const logs = await storage.getAuditLogs(100);\n      res.json(logs);\n    } catch (error) {\n      console.error('Get audit logs error:', error);\n      res.status(500).json({ error: 'Failed to fetch audit logs' });\n    }\n  });\n\n  // Attendance routes\n  app.get('/api/attendance', authMiddleware(storage), async (req, res) => {\n    try {\n      const { studentId, date } = req.query;\n      const filters = {\n        teacherId: req.user.role === 'teacher' ? req.user.id : undefined,\n        studentId: studentId,\n        date: date ? new Date(date) : undefined,\n      };\n      \n      const attendance = await storage.getAttendance(filters);\n      res.json(attendance);\n    } catch (error) {\n      console.error('Get attendance error:', error);\n      res.status(500).json({ error: 'Failed to fetch attendance' });\n    }\n  });\n\n  app.post('/api/attendance', authMiddleware(storage), roleMiddleware(['teacher']), csrfMiddleware, async (req, res) => {\n    try {\n      const data = insertAttendanceSchema.parse({ ...req.body, teacherId: req.user.id });\n      const attendance = await storage.createAttendance(data);\n      res.status(201).json(attendance);\n    } catch (error) {\n      console.error('Create attendance error:', error);\n      res.status(400).json({ error: error.message || 'Failed to record attendance' });\n    }\n  });\n\n  // Assignment routes\n  app.get('/api/assignments', authMiddleware(storage), async (req, res) => {\n    try {\n      const teacherId = req.user.role === 'teacher' ? req.user.id : undefined;\n      const assignments = await storage.getAssignments(teacherId);\n      res.json(assignments);\n    } catch (error) {\n      console.error('Get assignments error:', error);\n      res.status(500).json({ error: 'Failed to fetch assignments' });\n    }\n  });\n\n  app.post('/api/assignments', authMiddleware(storage), roleMiddleware(['teacher']), csrfMiddleware, async (req, res) => {\n    try {\n      const data = insertAssignmentSchema.parse({ ...req.body, teacherId: req.user.id });\n      const assignment = await storage.createAssignment(data);\n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error('Create assignment error:', error);\n      res.status(400).json({ error: error.message || 'Failed to create assignment' });\n    }\n  });\n\n  // Announcement routes\n  app.get('/api/announcements', authMiddleware(storage), async (req, res) => {\n    try {\n      const announcements = await storage.getAnnouncements();\n      res.json(announcements);\n    } catch (error) {\n      console.error('Get announcements error:', error);\n      res.status(500).json({ error: 'Failed to fetch announcements' });\n    }\n  });\n\n  app.post('/api/announcements', authMiddleware(storage), roleMiddleware(['admin']), csrfMiddleware, async (req, res) => {\n    try {\n      const data = insertAnnouncementSchema.parse({ ...req.body, userId: req.user.id });\n      const announcement = await storage.createAnnouncement(data);\n      res.status(201).json(announcement);\n    } catch (error) {\n      console.error('Create announcement error:', error);\n      res.status(400).json({ error: error.message || 'Failed to create announcement' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":15984},"server/storage.js":{"content":"import { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Client } from \"pg\";\nimport { eq, and, desc, count, sql } from \"drizzle-orm\";\nimport {\n  users,\n  students,\n  modules,\n  auditLogs,\n  attendance,\n  grades,\n  assignments,\n  announcements,\n  refreshTokens,\n} from \"@shared/schema\";\n\n\nclass PostgresStorage {\n  client;\n  db;\n\n  constructor() {\n    this.client = new Client({\n      connectionString: process.env.DATABASE_URL,\n      ssl: process.env.NODE_ENV === \"production\" ? { rejectUnauthorized: false } : false,\n    });\n    this.db = drizzle(this.client);\n  }\n\n  async connect() {\n    await this.client.connect();\n  }\n\n  async disconnect() {\n    await this.client.end();\n  }\n\n  // User methods\n  async getUser(id) {\n    const result = await this.db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email) {\n    const result = await this.db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user) {\n    const result = await this.db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id, updates) {\n    const result = await this.db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteUser(id) {\n    const result = await this.db.delete(users).where(eq(users.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getTeachers() {\n    return await this.db.select().from(users).where(eq(users.role, \"teacher\"));\n  }\n\n  // Student methods\n  async getStudents(teacherId) {\n    if (teacherId) {\n      return await this.db.select().from(students).where(eq(students.teacherId, teacherId));\n    }\n    return await this.db.select().from(students);\n  }\n\n  async getStudent(id) {\n    const result = await this.db.select().from(students).where(eq(students.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createStudent(student) {\n    const result = await this.db.insert(students).values(student).returning();\n    return result[0];\n  }\n\n  async updateStudent(id, updates) {\n    const result = await this.db\n      .update(students)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(students.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteStudent(id) {\n    const result = await this.db.delete(students).where(eq(students.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getStudentsByTeacher(teacherId) {\n    return await this.db.select().from(students).where(eq(students.teacherId, teacherId));\n  }\n\n  // Module methods\n  async getModules(teacherId) {\n    if (teacherId) {\n      return await this.db.select().from(modules).where(eq(modules.teacherId, teacherId));\n    }\n    return await this.db.select().from(modules);\n  }\n\n  async getModule(id) {\n    const result = await this.db.select().from(modules).where(eq(modules.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createModule(module) {\n    const result = await this.db.insert(modules).values(module).returning();\n    return result[0];\n  }\n\n  async updateModule(id, updates) {\n    const result = await this.db\n      .update(modules)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(modules.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteModule(id) {\n    const result = await this.db.delete(modules).where(eq(modules.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Attendance methods\n  async getAttendance(filters = {}) {\n    let query = this.db.select().from(attendance);\n    \n    if (filters.studentId) {\n      query = query.where(eq(attendance.studentId, filters.studentId));\n    }\n    if (filters.teacherId) {\n      query = query.where(eq(attendance.teacherId, filters.teacherId));\n    }\n    if (filters.date) {\n      const startOfDay = new Date(filters.date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(filters.date);\n      endOfDay.setHours(23, 59, 59, 999);\n      query = query.where(and(\n        sql`${attendance.date} >= ${startOfDay}`,\n        sql`${attendance.date} <= ${endOfDay}`\n      ));\n    }\n    \n    return await query.orderBy(desc(attendance.date));\n  }\n\n  async createAttendance(attendanceData) {\n    const result = await this.db.insert(attendance).values(attendanceData).returning();\n    return result[0];\n  }\n\n  async updateAttendance(id, updates) {\n    const result = await this.db\n      .update(attendance)\n      .set(updates)\n      .where(eq(attendance.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Grade methods\n  async getGrades(filters = {}) {\n    let query = this.db.select().from(grades);\n    \n    if (filters.studentId) {\n      query = query.where(eq(grades.studentId, filters.studentId));\n    }\n    if (filters.teacherId) {\n      query = query.where(eq(grades.teacherId, filters.teacherId));\n    }\n    if (filters.moduleId) {\n      query = query.where(eq(grades.moduleId, filters.moduleId));\n    }\n    \n    return await query.orderBy(desc(grades.examDate));\n  }\n\n  async createGrade(grade) {\n    const result = await this.db.insert(grades).values(grade).returning();\n    return result[0];\n  }\n\n  async updateGrade(id, updates) {\n    const result = await this.db\n      .update(grades)\n      .set(updates)\n      .where(eq(grades.id, id))\n      .returning();\n    return result[0];\n  }\n\n  // Assignment methods\n  async getAssignments(teacherId) {\n    if (teacherId) {\n      return await this.db.select().from(assignments).where(eq(assignments.teacherId, teacherId)).orderBy(desc(assignments.dueDate));\n    }\n    return await this.db.select().from(assignments).orderBy(desc(assignments.dueDate));\n  }\n\n  async createAssignment(assignment) {\n    const result = await this.db.insert(assignments).values(assignment).returning();\n    return result[0];\n  }\n\n  async updateAssignment(id, updates) {\n    const result = await this.db\n      .update(assignments)\n      .set(updates)\n      .where(eq(assignments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAssignment(id) {\n    const result = await this.db.delete(assignments).where(eq(assignments.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Announcement methods\n  async getAnnouncements() {\n    return await this.db.select().from(announcements).where(eq(announcements.isActive, true)).orderBy(desc(announcements.createdAt));\n  }\n\n  async createAnnouncement(announcement) {\n    const result = await this.db.insert(announcements).values(announcement).returning();\n    return result[0];\n  }\n\n  async updateAnnouncement(id, updates) {\n    const result = await this.db\n      .update(announcements)\n      .set(updates)\n      .where(eq(announcements.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteAnnouncement(id) {\n    const result = await this.db.update(announcements).set({ isActive: false }).where(eq(announcements.id, id));\n    return result.rowCount > 0;\n  }\n\n  // Refresh token methods\n  async createRefreshToken(userId, tokenHash, expiresAt) {\n    await this.db.insert(refreshTokens).values({ userId, tokenHash, expiresAt });\n  }\n\n  async getRefreshToken(tokenHash) {\n    const result = await this.db\n      .select({ userId: refreshTokens.userId })\n      .from(refreshTokens)\n      .where(and(eq(refreshTokens.tokenHash, tokenHash), sql`${refreshTokens.expiresAt} > now()`))\n      .limit(1);\n    return result[0];\n  }\n\n  async deleteRefreshToken(tokenHash) {\n    await this.db.delete(refreshTokens).where(eq(refreshTokens.tokenHash, tokenHash));\n  }\n\n  async deleteAllRefreshTokens(userId) {\n    await this.db.delete(refreshTokens).where(eq(refreshTokens.userId, userId));\n  }\n\n  // Audit methods\n  async createAuditLog(userId, action, meta, ipAddress) {\n    await this.db.insert(auditLogs).values({ userId, action, meta, ipAddress });\n  }\n\n  async getAuditLogs(limit = 100) {\n    return await this.db.select().from(auditLogs).orderBy(desc(auditLogs.createdAt)).limit(limit);\n  }\n\n  // Dashboard stats\n  async getDashboardStats(userId, role) {\n    if (role === \"teacher\") {\n      const totalStudents = await this.db\n        .select({ count: count() })\n        .from(students)\n        .where(eq(students.teacherId, userId));\n\n      const todayAttendance = await this.db\n        .select({ count: count() })\n        .from(attendance)\n        .where(and(\n          eq(attendance.teacherId, userId),\n          eq(attendance.status, \"present\"),\n          sql`DATE(${attendance.date}) = CURRENT_DATE`\n        ));\n\n      const pendingAssignments = await this.db\n        .select({ count: count() })\n        .from(assignments)\n        .where(and(\n          eq(assignments.teacherId, userId),\n          eq(assignments.status, \"active\"),\n          sql`${assignments.dueDate} > now()`\n        ));\n\n      return {\n        totalStudents: totalStudents[0]?.count || 0,\n        presentToday: todayAttendance[0]?.count || 0,\n        pendingAssignments: pendingAssignments[0]?.count || 0,\n        todayClasses: 6, // This would come from a schedule table\n      };\n    } else {\n      // Admin stats\n      const totalTeachers = await this.db\n        .select({ count: count() })\n        .from(users)\n        .where(eq(users.role, \"teacher\"));\n\n      const totalStudents = await this.db\n        .select({ count: count() })\n        .from(students);\n\n      const activeAnnouncements = await this.db\n        .select({ count: count() })\n        .from(announcements)\n        .where(eq(announcements.isActive, true));\n\n      return {\n        totalTeachers: totalTeachers[0]?.count || 0,\n        totalStudents: totalStudents[0]?.count || 0,\n        activeAnnouncements: activeAnnouncements[0]?.count || 0,\n        systemHealth: \"Good\",\n      };\n    }\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":9746},"server/vite.js":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { createServer } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app, server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.jsx\"`,\n        `src=\"/src/main.jsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2194},"shared/schema.js":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer, jsonb, uuid } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  passwordHash: text(\"password_hash\").notNull(),\n  role: varchar(\"role\", { length: 20 }).notNull().default(\"teacher\"), // 'admin', 'teacher'\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const refreshTokens = pgTable(\"refresh_tokens\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  tokenHash: text(\"token_hash\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const students = pgTable(\"students\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: uuid(\"teacher_id\").references(() => users.id, { onDelete: \"set null\" }),\n  rollNo: varchar(\"roll_no\", { length: 50 }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  studentNumber: varchar(\"student_number\", { length: 20 }),\n  parentNumber1: varchar(\"parent_number1\", { length: 20 }),\n  parentNumber2: varchar(\"parent_number2\", { length: 20 }),\n  extraInfo: jsonb(\"extra_info\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const modules = pgTable(\"modules\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: uuid(\"teacher_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  moduleName: varchar(\"module_name\", { length: 255 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"active\"),\n  notes: text(\"notes\"),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"set null\" }),\n  action: varchar(\"action\", { length: 255 }).notNull(),\n  meta: jsonb(\"meta\"),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const attendance = pgTable(\"attendance\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: uuid(\"student_id\").notNull().references(() => students.id, { onDelete: \"cascade\" }),\n  teacherId: uuid(\"teacher_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  date: timestamp(\"date\").notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"present\"), // 'present', 'absent', 'late'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const grades = pgTable(\"grades\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: uuid(\"student_id\").notNull().references(() => students.id, { onDelete: \"cascade\" }),\n  teacherId: uuid(\"teacher_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  moduleId: uuid(\"module_id\").notNull().references(() => modules.id, { onDelete: \"cascade\" }),\n  grade: varchar(\"grade\", { length: 10 }).notNull(),\n  percentage: integer(\"percentage\"),\n  examType: varchar(\"exam_type\", { length: 50 }).notNull(), // 'weekly', 'midterm', 'final'\n  examDate: timestamp(\"exam_date\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const assignments = pgTable(\"assignments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: uuid(\"teacher_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  moduleId: uuid(\"module_id\").notNull().references(() => modules.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  dueDate: timestamp(\"due_date\").notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"active\"), // 'active', 'completed', 'cancelled'\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const announcements = pgTable(\"announcements\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull().default(\"general\"), // 'general', 'urgent', 'holiday'\n  targetAudience: varchar(\"target_audience\", { length: 50 }).notNull().default(\"all\"), // 'all', 'teachers', 'students', 'parents'\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertModuleSchema = createInsertSchema(modules).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGradeSchema = createInsertSchema(grades).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAssignmentSchema = createInsertSchema(assignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\n// TypeScript types removed for JavaScript compatibility\n","size_bytes":5993},"client/src/App.jsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      {/* <Route path=\"/\" component={Home}/> */}\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":733},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(220, 98%, 61%);\n  --primary-foreground: hsl(210, 20%, 98%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(210, 20%, 98%);\n  --muted: hsl(220, 14%, 96%);\n  --muted-foreground: hsl(220, 8%, 46%);\n  --accent: hsl(220, 14%, 96%);\n  --accent-foreground: hsl(220, 8%, 46%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 20%, 98%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(220, 98%, 61%);\n  --chart-1: hsl(220, 98%, 61%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(224, 71%, 4%);\n  --sidebar-primary: hsl(220, 98%, 61%);\n  --sidebar-primary-foreground: hsl(210, 20%, 98%);\n  --sidebar-accent: hsl(220, 14%, 96%);\n  --sidebar-accent-foreground: hsl(220, 8%, 46%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(220, 98%, 61%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(220, 98%, 61% / 0);\n  --shadow-xs: 0px 2px 0px 0px hsl(220, 98%, 61% / 0);\n  --shadow-sm: 0px 2px 0px 0px hsl(220, 98%, 61% / 0), 0px 1px 2px -1px hsl(220, 98%, 61% / 0);\n  --shadow: 0px 2px 0px 0px hsl(220, 98%, 61% / 0), 0px 1px 2px -1px hsl(220, 98%, 61% / 0);\n  --shadow-md: 0px 2px 0px 0px hsl(220, 98%, 61% / 0), 0px 2px 4px -1px hsl(220, 98%, 61% / 0);\n  --shadow-lg: 0px 2px 0px 0px hsl(220, 98%, 61% / 0), 0px 4px 6px -1px hsl(220, 98%, 61% / 0);\n  --shadow-xl: 0px 2px 0px 0px hsl(220, 98%, 61% / 0), 0px 8px 10px -1px hsl(220, 98%, 61% / 0);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220, 98%, 61% / 0);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(224, 71%, 4%);\n  --foreground: hsl(210, 20%, 98%);\n  --card: hsl(224, 71%, 4%);\n  --card-foreground: hsl(210, 20%, 98%);\n  --popover: hsl(224, 71%, 4%);\n  --popover-foreground: hsl(210, 20%, 98%);\n  --primary: hsl(220, 98%, 61%);\n  --primary-foreground: hsl(224, 71%, 4%);\n  --secondary: hsl(158, 64%, 52%);\n  --secondary-foreground: hsl(224, 71%, 4%);\n  --muted: hsl(220, 8%, 46%);\n  --muted-foreground: hsl(220, 14%, 96%);\n  --accent: hsl(220, 8%, 46%);\n  --accent-foreground: hsl(220, 14%, 96%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 20%, 98%);\n  --border: hsl(220, 8%, 46%);\n  --input: hsl(220, 8%, 46%);\n  --ring: hsl(220, 98%, 61%);\n  --chart-1: hsl(220, 98%, 61%);\n  --chart-2: hsl(158, 64%, 52%);\n  --chart-3: hsl(42, 92%, 56%);\n  --chart-4: hsl(147, 78%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(224, 71%, 4%);\n  --sidebar-foreground: hsl(210, 20%, 98%);\n  --sidebar-primary: hsl(220, 98%, 61%);\n  --sidebar-primary-foreground: hsl(224, 71%, 4%);\n  --sidebar-accent: hsl(220, 8%, 46%);\n  --sidebar-accent-foreground: hsl(220, 14%, 96%);\n  --sidebar-border: hsl(220, 8%, 46%);\n  --sidebar-ring: hsl(220, 98%, 61%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.dashboard-card {\n  transition: all 0.2s ease-in-out;\n}\n\n.dashboard-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.stat-card {\n  background: linear-gradient(135deg, var(--primary) 0%, hsl(220, 98%, 51%) 100%);\n}\n\n.secondary-stat {\n  background: linear-gradient(135deg, var(--secondary) 0%, hsl(158, 64%, 42%) 100%);\n}\n\n.nav-link {\n  transition: all 0.2s ease-in-out;\n}\n\n.nav-link:hover {\n  background-color: var(--accent);\n  border-radius: var(--radius);\n}\n\n.nav-link.active {\n  background-color: var(--primary);\n  color: var(--primary-foreground);\n  border-radius: var(--radius);\n}\n","size_bytes":4186},"client/src/main.jsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")).render(<App />);\n","size_bytes":156},"server/middleware/auth.js":{"content":"import jwt from \"jsonwebtoken\";\nimport { storage } from \"../storage.js\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key-change-in-production\";\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || \"15m\";\nconst REFRESH_TOKEN_EXPIRES_IN = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function authenticate(req, res, next) {\n  try {\n    const token = req.headers.authorization?.replace(\"Bearer \", \"\");\n    \n    if (!token) {\n      return res.status(401).json({ error: \"Access token required\" });\n    }\n\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET);\n      const user = await storage.getUser(decoded.userId);\n      \n      if (!user || !user.is_active) {\n        return res.status(401).json({ error: \"Invalid or inactive user\" });\n      }\n\n      req.user = user;\n      req.userId = user.id;\n      next();\n    } catch (jwtError) {\n      if (jwtError.name === \"TokenExpiredError\") {\n        return res.status(401).json({ error: \"Token expired\", code: \"TOKEN_EXPIRED\" });\n      }\n      return res.status(401).json({ error: \"Invalid token\" });\n    }\n  } catch (error) {\n    console.error(\"Auth middleware error:\", error);\n    res.status(500).json({ error: \"Authentication error\" });\n  }\n}\n\nexport function requireRole(roles) {\n  return async (req, res, next) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      if (!roles.includes(req.user.role)) {\n        return res.status(403).json({ error: \"Insufficient permissions\" });\n      }\n\n      // For teacher role, get teacher profile\n      if (req.user.role === \"teacher\") {\n        const teacher = await storage.getTeacherByUserId(req.user.id);\n        if (!teacher) {\n          return res.status(404).json({ error: \"Teacher profile not found\" });\n        }\n        req.teacher = teacher;\n      }\n\n      next();\n    } catch (error) {\n      console.error(\"Role middleware error:\", error);\n      res.status(500).json({ error: \"Authorization error\" });\n    }\n  };\n}\n\nexport function generateTokens(user) {\n  const accessToken = jwt.sign(\n    { userId: user.id, email: user.email, role: user.role },\n    JWT_SECRET,\n    { expiresIn: JWT_EXPIRES_IN }\n  );\n\n  const refreshToken = jwt.sign(\n    { userId: user.id, type: \"refresh\" },\n    JWT_SECRET,\n    { expiresIn: \"7d\" }\n  );\n\n  return { accessToken, refreshToken };\n}\n\nexport async function refreshAccessToken(req, res, next) {\n  try {\n    const refreshToken = req.cookies.refreshToken;\n    \n    if (!refreshToken) {\n      return res.status(401).json({ error: \"Refresh token required\" });\n    }\n\n    try {\n      const decoded = jwt.verify(refreshToken, JWT_SECRET);\n      \n      if (decoded.type !== \"refresh\") {\n        return res.status(401).json({ error: \"Invalid token type\" });\n      }\n\n      // Check if refresh token exists in database\n      const crypto = await import(\"crypto\");\n      const tokenHash = crypto.createHash(\"sha256\").update(refreshToken).digest(\"hex\");\n      const storedToken = await storage.getRefreshToken(tokenHash);\n      \n      if (!storedToken || storedToken.expires_at < new Date()) {\n        return res.status(401).json({ error: \"Invalid or expired refresh token\" });\n      }\n\n      const user = await storage.getUser(decoded.userId);\n      \n      if (!user || !user.is_active) {\n        return res.status(401).json({ error: \"User not found or inactive\" });\n      }\n\n      // Generate new access token\n      const { accessToken } = generateTokens(user);\n      \n      res.json({ accessToken });\n    } catch (jwtError) {\n      return res.status(401).json({ error: \"Invalid refresh token\" });\n    }\n  } catch (error) {\n    console.error(\"Refresh token error:\", error);\n    res.status(500).json({ error: \"Token refresh error\" });\n  }\n}\n","size_bytes":3770},"server/middleware/security.js":{"content":"import rateLimit from \"express-rate-limit\";\nimport helmet from \"helmet\";\nimport crypto from \"crypto\";\n\n// CSRF Protection\nexport function csrfProtection(req, res, next) {\n  if (req.method === \"GET\") {\n    // Generate CSRF token for GET requests\n    const token = crypto.randomBytes(32).toString(\"hex\");\n    res.cookie(\"csrfToken\", token, { \n      httpOnly: false, \n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"strict\"\n    });\n    res.locals.csrfToken = token;\n    return next();\n  }\n\n  // Validate CSRF token for state-changing requests\n  const tokenFromHeader = req.headers[\"x-csrf-token\"];\n  const tokenFromCookie = req.cookies.csrfToken;\n\n  if (!tokenFromHeader || !tokenFromCookie || tokenFromHeader !== tokenFromCookie) {\n    return res.status(403).json({ error: \"Invalid CSRF token\" });\n  }\n\n  next();\n}\n\n// Rate limiting\nexport const authLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // 5 attempts per window\n  message: { error: \"Too many login attempts, please try again later\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nexport const generalLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // 100 requests per window\n  message: { error: \"Too many requests, please try again later\" },\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\n// Security headers\nexport function securityHeaders() {\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  \n  return helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\"],\n        scriptSrc: isDevelopment \n          ? [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"] \n          : [\"'self'\"],\n        connectSrc: isDevelopment \n          ? [\"'self'\", \"ws:\", \"wss:\"] \n          : [\"'self'\"],\n      },\n    },\n    hsts: {\n      maxAge: 31536000,\n      includeSubDomains: true,\n      preload: true,\n    },\n  });\n}\n\n// Audit logging middleware\nexport function auditLogger(action) {\n  return async (req, res, next) => {\n    const originalSend = res.send;\n    \n    res.send = function(data) {\n      // Only log successful operations (2xx status codes)\n      if (res.statusCode >= 200 && res.statusCode < 300) {\n        const { storage } = require(\"../storage.js\");\n        \n        // Extract resource info from request\n        let resource = req.route?.path || req.path;\n        let resourceId = req.params.id || req.body.id;\n        \n        storage.createAuditLog({\n          user_id: req.user?.id,\n          action,\n          resource,\n          resource_id: resourceId,\n          meta: {\n            method: req.method,\n            userAgent: req.get(\"User-Agent\"),\n            statusCode: res.statusCode\n          },\n          ip_address: req.ip\n        }).catch(err => console.error(\"Audit log error:\", err));\n      }\n      \n      originalSend.call(this, data);\n    };\n    \n    next();\n  };\n}\n","size_bytes":3066},"server/utils/crypto.js":{"content":"import argon2 from \"argon2\";\nimport crypto from \"crypto\";\n\nexport async function hashPassword(password) {\n  try {\n    return await argon2.hash(password, {\n      type: argon2.argon2id,\n      memoryCost: 2 # thoughts\n\nThis is a comprehensive educational management system with Teacher and Admin dashboards. I need to implement a full-stack application using the provided Supabase database URL with session-based authentication, role-based access control, and multiple integrations. The design reference shows a professional dashboard interface with sidebar navigation, stats cards, and various management sections.\n\nKey requirements:\n1. Convert the HTML design to React components using JSX (no TypeScript)\n2. Implement session-based authentication with Argon2 password hashing and JWT tokens\n3. Use the provided Supabase PostgreSQL database with pg driver\n4. Create Teacher and Admin dashboards with specific functionality\n5. Integrate with WhatsApp (AiSensy), Google Workspace, HubSpot, and OpenAI\n6. Implement proper security middleware and RBAC\n\nI'll need to create a comprehensive database schema, authentication system, API routes, and React components that match the design reference exactly.\n\n# useful_guidelines_from_blueprints\n\nFrom the JavaScript OpenAI blueprint:\n- Use OpenAI's newest model \"gpt-5\" (released August 7, 2025) for any AI-powered features like report summaries\n- Use response_format: { type: \"json_object\" } for structured responses\n- Implement proper error handling for AI features\n\nFrom the JavaScript Supabase blueprint:\n- Connect directly to PostgreSQL using Drizzle, not @supabase/supabase-js package\n- Use the provided DATABASE_URL for connection\n\nFrom the fullstack_js guidelines:\n- Put most functionality in frontend, backend only for data persistence and API calls\n- Generate data model first in shared/schema.js\n- Use session-based storage and thin API routes\n- Use wouter for routing and react-query for data fetching\n\n# directory_structure\n\n```json\n[\n    {\"path\": \"shared/schema.js\", \"status\": \"overwritten\"},\n    {\"path\": \"server/storage.js\", \"status\": \"overwritten\"},\n    {\"path\": \"server/routes.js\", \"status\": \"overwritten\"},\n    {\"path\": \"server/auth.js\", \"status\": \"new\"},\n    {\"path\": \"server/middleware.js\", \"status\": \"new\"},\n    {\"path\": \"client/index.html\", \"status\": \"overwritten\"},\n    {\"path\": \"client/src/main.jsx\", \"status\": \"overwritten\"},\n    {\"path\": \"client/src/App.jsx\", \"status\": \"overwritten\"},\n    {\"path\": \"client/src/index.css\", \"status\": \"overwritten\"},\n    {\"path\": \"client/src/lib/api.js\", \"status\": \"new\"},\n    {\"path\": \"client/src/lib/auth.js\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/Login.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/TeacherDashboard.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/pages/AdminDashboard.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/Layout.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/Sidebar.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/Header.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/StatsCard.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/StudentTable.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/StudentForm.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/ModuleForm.jsx\", \"status\": \"new\"},\n    {\"path\": \"client/src/components/ProtectedRoute.jsx\", \"status\": \"new\"},\n    {\"path\": \".env.example\", \"status\": \"new\"},\n    {\"path\": \"README.md\", \"status\": \"new\"}\n]\n","size_bytes":3487},"client/src/components/Header.jsx":{"content":"import { useAuth } from '../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Bell, Search } from 'lucide-react';\n\nexport default function Header({ title, subtitle }) {\n  const { user } = useAuth();\n\n  const getInitials = (email) => {\n    return email ? email.substring(0, 2).toUpperCase() : 'U';\n  };\n\n  const getUserDisplayName = () => {\n    if (!user) return 'User';\n    // Extract name from email or use email\n    const emailName = user.email.split('@')[0];\n    return emailName.charAt(0).toUpperCase() + emailName.slice(1);\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border p-6\" data-testid=\"header\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-semibold\" data-testid=\"header-title\">{title}</h2>\n          <p className=\"text-muted-foreground\" data-testid=\"header-subtitle\">\n            {subtitle}, <span className=\"font-medium\">{getUserDisplayName()}</span>\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-search\">\n            <Search className=\"w-5 h-5\" />\n          </Button>\n          \n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full text-xs flex items-center justify-center text-destructive-foreground\">\n              3\n            </span>\n          </Button>\n          \n          {/* Profile */}\n          <div className=\"flex items-center space-x-2\">\n            <Avatar data-testid=\"avatar-user\">\n              <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                {getInitials(user?.email)}\n              </AvatarFallback>\n            </Avatar>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2071},"client/src/components/Layout.jsx":{"content":"import Sidebar from './Sidebar';\nimport Header from './Header';\n\nexport default function Layout({ children, title, subtitle }) {\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 bg-muted/30\">\n        <Header title={title} subtitle={subtitle} />\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":407},"client/src/components/ModuleForm.jsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiClient } from '../lib/api';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Loader2 } from 'lucide-react';\n\nconst moduleSchema = z.object({\n  moduleName: z.string().min(1, 'Module name is required'),\n  status: z.string().min(1, 'Status is required'),\n  notes: z.string().optional(),\n});\n\nconst statusOptions = [\n  { value: 'active', label: 'Active' },\n  { value: 'inactive', label: 'Inactive' },\n  { value: 'completed', label: 'Completed' },\n  { value: 'draft', label: 'Draft' },\n];\n\nexport default function ModuleForm({ module = null, onSuccess, onCancel }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isEditing = !!module;\n\n  const form = useForm({\n    resolver: zodResolver(moduleSchema),\n    defaultValues: {\n      moduleName: module?.moduleName || '',\n      status: module?.status || 'active',\n      notes: module?.notes || '',\n    },\n  });\n\n  // Create module mutation\n  const createModuleMutation = useMutation({\n    mutationFn: (data) => apiClient.post('/modules', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['/api/modules']);\n      toast({\n        title: \"Module Created\",\n        description: \"Module has been successfully created.\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Create Module\",\n        description: error.message || \"Please check the information and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update module mutation\n  const updateModuleMutation = useMutation({\n    mutationFn: (data) => apiClient.patch(`/modules/${module.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['/api/modules']);\n      toast({\n        title: \"Module Updated\",\n        description: \"Module information has been successfully updated.\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Update Module\",\n        description: error.message || \"Please check the information and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data) => {\n    setIsSubmitting(true);\n    \n    try {\n      const submitData = {\n        ...data,\n        notes: data.notes || null,\n      };\n\n      if (isEditing) {\n        updateModuleMutation.mutate(submitData);\n      } else {\n        createModuleMutation.mutate(submitData);\n      }\n    } catch (error) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please check the form data and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const isPending = createModuleMutation.isPending || updateModuleMutation.isPending || isSubmitting;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"module-form\">\n        <FormField\n          control={form.control}\n          name=\"moduleName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Module Name *</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"e.g., Mathematics - Advanced Calculus\" \n                  {...field} \n                  data-testid=\"input-module-name\"\n                />\n              </FormControl>\n              <FormDescription>\n                Enter a descriptive name for this module or subject\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"status\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Status *</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger data-testid=\"select-module-status\">\n                    <SelectValue placeholder=\"Select module status\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {statusOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                Current status of this module\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Additional notes about this module, curriculum details, requirements, etc.\"\n                  className=\"min-h-[120px]\"\n                  {...field}\n                  data-testid=\"input-module-notes\"\n                />\n              </FormControl>\n              <FormDescription>\n                Optional field for module description, curriculum details, prerequisites, or any other relevant information\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-4 pt-4 border-t\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n            disabled={isPending}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isPending}\n            data-testid=\"button-submit\"\n          >\n            {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            {isPending \n              ? (isEditing ? 'Updating...' : 'Creating...') \n              : (isEditing ? 'Update Module' : 'Create Module')\n            }\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":6711},"client/src/components/ProtectedRoute.jsx":{"content":"import { useAuth } from '../lib/auth';\nimport { useLocation } from 'wouter';\n\nexport default function ProtectedRoute({ children, allowedRoles = [] }) {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect to login if not authenticated\n  if (!user) {\n    setLocation('/login');\n    return null;\n  }\n\n  // Check if user has required role\n  if (allowedRoles.length > 0 && !allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <div className=\"w-16 h-16 bg-destructive/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-destructive\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-foreground mb-2\">Access Denied</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            You don't have permission to access this page. Your current role is \"{user.role}\" but this page requires one of: {allowedRoles.join(', ')}.\n          </p>\n          <button\n            onClick={() => {\n              const dashboardPath = user.role === 'admin' ? '/admin-dashboard' : '/teacher-dashboard';\n              setLocation(dashboardPath);\n            }}\n            className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors\"\n          >\n            Go to Your Dashboard\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return children;\n}\n","size_bytes":2280},"client/src/components/Sidebar.jsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { \n  BookOpen,\n  LayoutDashboard,\n  Calendar,\n  CheckCircle,\n  BarChart3,\n  MessageSquare,\n  FileText,\n  Users,\n  GraduationCap,\n  Megaphone,\n  DollarSign,\n  Bus,\n  Settings,\n  LogOut\n} from 'lucide-react';\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [collapsed, setCollapsed] = useState(false);\n\n  const teacherNavItems = [\n    { path: '/teacher-dashboard', label: 'Overview', icon: LayoutDashboard },\n    { path: '/teacher-dashboard/schedule', label: 'Class Schedule', icon: Calendar },\n    { path: '/teacher-dashboard/attendance', label: 'Attendance', icon: CheckCircle },\n    { path: '/teacher-dashboard/grades', label: 'Grades & Progress', icon: BarChart3 },\n    { path: '/teacher-dashboard/communication', label: 'Parent Communication', icon: MessageSquare },\n    { path: '/teacher-dashboard/assignments', label: 'Assignments', icon: FileText },\n    { path: '/teacher-dashboard/students', label: 'Student Profiles', icon: Users },\n  ];\n\n  const adminNavItems = [\n    { path: '/admin-dashboard', label: 'Overview', icon: LayoutDashboard },\n    { path: '/admin-dashboard/teachers', label: 'Teacher Management', icon: GraduationCap },\n    { path: '/admin-dashboard/analytics', label: 'Analytics & Reports', icon: BarChart3 },\n    { path: '/admin-dashboard/announcements', label: 'Announcements', icon: Megaphone },\n    { path: '/admin-dashboard/finance', label: 'Fee Management', icon: DollarSign },\n    { path: '/admin-dashboard/transport', label: 'Transport', icon: Bus },\n    { path: '/admin-dashboard/library', label: 'Digital Library', icon: BookOpen },\n    { path: '/admin-dashboard/settings', label: 'System Settings', icon: Settings },\n  ];\n\n  const navItems = user?.role === 'admin' ? adminNavItems : teacherNavItems;\n  const dashboardTitle = user?.role === 'admin' ? 'Admin Dashboard' : 'Teacher Dashboard';\n\n  const handleNavClick = (path) => {\n    // For now, just show current path selection\n    if (path === '/teacher-dashboard' || path === '/admin-dashboard') {\n      setLocation(path);\n    } else {\n      console.log(`Navigate to: ${path}`);\n      // TODO: Implement sub-route handling\n    }\n  };\n\n  const handleLogout = async () => {\n    await logout();\n    setLocation('/login');\n  };\n\n  return (\n    <aside className={`bg-card border-r border-border shadow-sm transition-all duration-300 ${\n      collapsed ? 'w-16' : 'w-64'\n    }`} data-testid=\"sidebar\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <BookOpen className=\"w-6 h-6 text-primary-foreground\" />\n          </div>\n          {!collapsed && (\n            <div>\n              <h1 className=\"text-lg font-semibold\">EduManage</h1>\n              <p className=\"text-xs text-muted-foreground\">School Management</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <nav className=\"px-4 pb-4\">\n        <div className=\"mb-4\">\n          {!collapsed && (\n            <p className=\"px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider mb-2\">\n              {dashboardTitle}\n            </p>\n          )}\n          <ul className=\"space-y-1\">\n            {navItems.map((item) => {\n              const isActive = location === item.path || \n                (item.path !== '/teacher-dashboard' && item.path !== '/admin-dashboard' && location.startsWith(item.path));\n              \n              return (\n                <li key={item.path}>\n                  <button\n                    onClick={() => handleNavClick(item.path)}\n                    className={`nav-link flex items-center px-3 py-2 text-sm font-medium w-full text-left transition-colors ${\n                      isActive ? 'active bg-primary text-primary-foreground' : 'hover:bg-accent'\n                    }`}\n                    data-testid={`nav-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"w-4 h-4 mr-3 flex-shrink-0\" />\n                    {!collapsed && <span>{item.label}</span>}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </nav>\n\n      {/* User info and logout */}\n      <div className=\"absolute bottom-4 left-4 right-4\">\n        <div className=\"border-t border-border pt-4\">\n          {!collapsed && user && (\n            <div className=\"px-3 mb-3\">\n              <p className=\"text-sm font-medium\">{user.email}</p>\n              <p className=\"text-xs text-muted-foreground capitalize\">{user.role}</p>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"w-full justify-start text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-3\" />\n            {!collapsed && <span>Logout</span>}\n          </Button>\n        </div>\n      </div>\n\n      {/* Collapse toggle */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setCollapsed(!collapsed)}\n        className=\"absolute top-20 -right-3 bg-background border border-border rounded-full w-6 h-6 p-0 hover:bg-accent\"\n        data-testid=\"button-toggle-sidebar\"\n      >\n        <div className={`w-3 h-3 transition-transform ${collapsed ? 'rotate-180' : ''}`}>\n          <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n          </svg>\n        </div>\n      </Button>\n    </aside>\n  );\n}\n","size_bytes":5898},"client/src/components/StatsCard.jsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\n\nexport default function StatsCard({ title, value, icon: Icon, color = 'primary', isString = false }) {\n  const getColorClasses = (color) => {\n    switch (color) {\n      case 'primary':\n        return 'stat-card text-primary-foreground';\n      case 'secondary':\n        return 'secondary-stat text-primary-foreground';\n      case 'destructive':\n        return 'bg-destructive text-destructive-foreground';\n      case 'accent':\n        return 'bg-accent text-accent-foreground';\n      case 'success':\n        return 'bg-secondary text-secondary-foreground';\n      default:\n        return 'stat-card text-primary-foreground';\n    }\n  };\n\n  return (\n    <Card className=\"dashboard-card\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-muted-foreground text-sm\">{title}</p>\n            <p className={`text-2xl font-semibold ${isString ? 'text-lg' : ''}`}>\n              {value}\n            </p>\n          </div>\n          <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${getColorClasses(color)}`}>\n            <Icon className=\"w-6 h-6\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1285},"client/src/components/StudentForm.jsx":{"content":"import { useState, useEffect } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiClient } from '../lib/api';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Loader2 } from 'lucide-react';\n\nconst studentSchema = z.object({\n  rollNo: z.string().min(1, 'Roll number is required'),\n  name: z.string().min(1, 'Student name is required'),\n  studentNumber: z.string().optional(),\n  parentNumber1: z.string().optional(),\n  parentNumber2: z.string().optional(),\n  extraInfo: z.string().optional(),\n});\n\nexport default function StudentForm({ student = null, onSuccess, onCancel }) {\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const isEditing = !!student;\n\n  const form = useForm({\n    resolver: zodResolver(studentSchema),\n    defaultValues: {\n      rollNo: student?.rollNo || '',\n      name: student?.name || '',\n      studentNumber: student?.studentNumber || '',\n      parentNumber1: student?.parentNumber1 || '',\n      parentNumber2: student?.parentNumber2 || '',\n      extraInfo: student?.extraInfo ? JSON.stringify(student.extraInfo, null, 2) : '',\n    },\n  });\n\n  // Create student mutation\n  const createStudentMutation = useMutation({\n    mutationFn: (data) => apiClient.post('/students', data),\n    onSuccess: () => {\n      toast({\n        title: \"Student Added\",\n        description: \"Student has been successfully added to the system.\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Add Student\",\n        description: error.message || \"Please check the information and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update student mutation\n  const updateStudentMutation = useMutation({\n    mutationFn: (data) => apiClient.patch(`/students/${student.id}`, data),\n    onSuccess: () => {\n      toast({\n        title: \"Student Updated\",\n        description: \"Student information has been successfully updated.\",\n      });\n      onSuccess();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Update Student\",\n        description: error.message || \"Please check the information and try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data) => {\n    setIsSubmitting(true);\n    \n    try {\n      // Parse extraInfo if provided\n      let extraInfo = null;\n      if (data.extraInfo && data.extraInfo.trim()) {\n        try {\n          extraInfo = JSON.parse(data.extraInfo);\n        } catch (e) {\n          // If JSON parsing fails, store as simple object\n          extraInfo = { notes: data.extraInfo };\n        }\n      }\n\n      const submitData = {\n        ...data,\n        extraInfo,\n        // Remove empty strings\n        studentNumber: data.studentNumber || null,\n        parentNumber1: data.parentNumber1 || null,\n        parentNumber2: data.parentNumber2 || null,\n      };\n\n      if (isEditing) {\n        updateStudentMutation.mutate(submitData);\n      } else {\n        createStudentMutation.mutate(submitData);\n      }\n    } catch (error) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please check the form data and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const isPending = createStudentMutation.isPending || updateStudentMutation.isPending || isSubmitting;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\" data-testid=\"student-form\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"rollNo\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Roll Number *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., 2024001\" {...field} data-testid=\"input-roll-no\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Full Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., John Doe\" {...field} data-testid=\"input-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"studentNumber\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Student Phone Number</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., +1234567890\" {...field} data-testid=\"input-student-number\" />\n                </FormControl>\n                <FormDescription>Optional student contact number</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"parentNumber1\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Parent Contact 1</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., +1234567890\" {...field} data-testid=\"input-parent-number1\" />\n                </FormControl>\n                <FormDescription>Primary parent/guardian contact</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"parentNumber2\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Parent Contact 2</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., +1234567890\" {...field} data-testid=\"input-parent-number2\" />\n                </FormControl>\n                <FormDescription>Secondary parent/guardian contact</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"extraInfo\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Additional Information</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Additional notes, medical information, or JSON data...\"\n                  className=\"min-h-[100px]\"\n                  {...field}\n                  data-testid=\"input-extra-info\"\n                />\n              </FormControl>\n              <FormDescription>\n                Optional field for additional notes, medical information, or structured data (JSON format supported)\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-4 pt-4 border-t\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onCancel}\n            disabled={isPending}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isPending}\n            data-testid=\"button-submit\"\n          >\n            {isPending && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\n            {isPending \n              ? (isEditing ? 'Updating...' : 'Adding...') \n              : (isEditing ? 'Update Student' : 'Add Student')\n            }\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":8150},"client/src/components/StudentTable.jsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiClient } from '../lib/api';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport StudentForm from './StudentForm';\nimport { Edit, Trash2, Plus, Search } from 'lucide-react';\n\nexport default function StudentTable({ students = [], isAdmin = false }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingStudent, setEditingStudent] = useState(null);\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n\n  // Filter students based on search term\n  const filteredStudents = students.filter(student =>\n    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    student.rollNo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (student.studentNumber && student.studentNumber.includes(searchTerm))\n  );\n\n  // Delete student mutation\n  const deleteStudentMutation = useMutation({\n    mutationFn: (studentId) => apiClient.delete(`/students/${studentId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries(['/api/students']);\n      toast({\n        title: \"Student Deleted\",\n        description: \"Student has been successfully removed from the system.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete student. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (student) => {\n    setEditingStudent(student);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (studentId) => {\n    deleteStudentMutation.mutate(studentId);\n  };\n\n  const handleAddSuccess = () => {\n    setIsAddDialogOpen(false);\n    queryClient.invalidateQueries(['/api/students']);\n  };\n\n  const handleEditSuccess = () => {\n    setIsEditDialogOpen(false);\n    setEditingStudent(null);\n    queryClient.invalidateQueries(['/api/students']);\n  };\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"student-table\">\n      {/* Header with search and add button */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search students...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-8 w-64\"\n              data-testid=\"input-search-students\"\n            />\n          </div>\n          <span className=\"text-sm text-muted-foreground\">\n            {filteredStudents.length} student{filteredStudents.length !== 1 ? 's' : ''}\n          </span>\n        </div>\n\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-student\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Student\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Student</DialogTitle>\n              <DialogDescription>\n                Enter the student's information below. All fields marked with * are required.\n              </DialogDescription>\n            </DialogHeader>\n            <StudentForm\n              onSuccess={handleAddSuccess}\n              onCancel={() => setIsAddDialogOpen(false)}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Students table */}\n      {filteredStudents.length > 0 ? (\n        <div className=\"border rounded-lg\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Roll No.</TableHead>\n                <TableHead>Name</TableHead>\n                <TableHead>Student Number</TableHead>\n                <TableHead>Parent Contact 1</TableHead>\n                <TableHead>Parent Contact 2</TableHead>\n                {isAdmin && <TableHead>Teacher</TableHead>}\n                <TableHead>Status</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredStudents.map((student, index) => (\n                <TableRow key={student.id} data-testid={`student-row-${index}`}>\n                  <TableCell className=\"font-medium\">{student.rollNo}</TableCell>\n                  <TableCell>{student.name}</TableCell>\n                  <TableCell>{student.studentNumber || '-'}</TableCell>\n                  <TableCell>{student.parentNumber1 || '-'}</TableCell>\n                  <TableCell>{student.parentNumber2 || '-'}</TableCell>\n                  {isAdmin && (\n                    <TableCell>\n                      {student.teacherId ? (\n                        <Badge variant=\"outline\">Assigned</Badge>\n                      ) : (\n                        <Badge variant=\"secondary\">Unassigned</Badge>\n                      )}\n                    </TableCell>\n                  )}\n                  <TableCell>\n                    <Badge variant=\"default\">Active</Badge>\n                  </TableCell>\n                  <TableCell className=\"text-right\">\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(student)}\n                        data-testid={`button-edit-student-${index}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      \n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-destructive hover:text-destructive\"\n                            data-testid={`button-delete-student-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Student</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete {student.name}? This action cannot be undone\n                              and will remove all associated records including attendance and grades.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => handleDelete(student.id)}\n                              className=\"bg-destructive hover:bg-destructive/90\"\n                              disabled={deleteStudentMutation.isPending}\n                            >\n                              {deleteStudentMutation.isPending ? 'Deleting...' : 'Delete'}\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      ) : (\n        <div className=\"text-center py-12 border border-dashed rounded-lg\" data-testid=\"no-students-message\">\n          <div className=\"mx-auto w-24 h-24 bg-muted rounded-full flex items-center justify-center mb-4\">\n            <Search className=\"w-8 h-8 text-muted-foreground\" />\n          </div>\n          <h3 className=\"text-lg font-semibold mb-2\">\n            {searchTerm ? 'No students found' : 'No students yet'}\n          </h3>\n          <p className=\"text-muted-foreground mb-6\">\n            {searchTerm \n              ? `No students match \"${searchTerm}\". Try adjusting your search.`\n              : 'Get started by adding your first student to the system.'\n            }\n          </p>\n          {!searchTerm && (\n            <Button onClick={() => setIsAddDialogOpen(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Your First Student\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Student</DialogTitle>\n            <DialogDescription>\n              Update the student's information below.\n            </DialogDescription>\n          </DialogHeader>\n          {editingStudent && (\n            <StudentForm\n              student={editingStudent}\n              onSuccess={handleEditSuccess}\n              onCancel={() => {\n                setIsEditDialogOpen(false);\n                setEditingStudent(null);\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":10063},"client/src/hooks/use-mobile.jsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.js":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.js":{"content":"export class ApiClient {\n  constructor() {\n    this.baseURL = '/api';\n    this.csrfToken = null;\n  }\n\n  async getCsrfToken() {\n    if (!this.csrfToken) {\n      const response = await fetch(`${this.baseURL}/csrf-token`, {\n        credentials: 'include'\n      });\n      const data = await response.json();\n      this.csrfToken = data.csrfToken;\n    }\n    return this.csrfToken;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include',\n      ...options,\n    };\n\n    // Add CSRF token for non-GET requests\n    if (options.method && options.method !== 'GET') {\n      const csrfToken = await this.getCsrfToken();\n      config.headers['X-CSRF-Token'] = csrfToken;\n    }\n\n    // Add auth token if available\n    const authToken = localStorage.getItem('accessToken');\n    if (authToken) {\n      config.headers['Authorization'] = `Bearer ${authToken}`;\n    }\n\n    const response = await fetch(url, config);\n\n    // Handle 401 - try to refresh token\n    if (response.status === 401 && authToken) {\n      const refreshed = await this.refreshToken();\n      if (refreshed) {\n        // Retry the original request\n        const newAuthToken = localStorage.getItem('accessToken');\n        config.headers['Authorization'] = `Bearer ${newAuthToken}`;\n        return await fetch(url, config);\n      } else {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('accessToken');\n        window.location.href = '/login';\n        return;\n      }\n    }\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ error: 'Network error' }));\n      throw new Error(error.error || `HTTP ${response.status}`);\n    }\n\n    return response;\n  }\n\n  async refreshToken() {\n    try {\n      const response = await fetch(`${this.baseURL}/auth/refresh`, {\n        method: 'POST',\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('accessToken', data.accessToken);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      return false;\n    }\n  }\n\n  async get(endpoint) {\n    const response = await this.request(endpoint);\n    return response.json();\n  }\n\n  async post(endpoint, data) {\n    const response = await this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n\n  async patch(endpoint, data) {\n    const response = await this.request(endpoint, {\n      method: 'PATCH',\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n\n  async delete(endpoint) {\n    const response = await this.request(endpoint, {\n      method: 'DELETE',\n    });\n    return response.json();\n  }\n}\n\nexport const apiClient = new ApiClient();\n","size_bytes":2961},"client/src/lib/auth.jsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { apiClient } from './api';\n\nconst AuthContext = createContext();\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const accessToken = localStorage.getItem('accessToken');\n      if (!accessToken) {\n        setLoading(false);\n        return;\n      }\n\n      const data = await apiClient.get('/users/me');\n      setUser(data.user);\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('accessToken');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const data = await apiClient.post('/auth/login', { email, password });\n      localStorage.setItem('accessToken', data.accessToken);\n      setUser(data.user);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await apiClient.post('/auth/logout', {});\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      setUser(null);\n    }\n  };\n\n  const registerAdmin = async (email, password) => {\n    try {\n      await apiClient.post('/auth/register-admin', { email, password });\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };\n\n  const value = {\n    user,\n    loading,\n    login,\n    logout,\n    registerAdmin,\n    checkAuth,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1981},"client/src/lib/queryClient.js":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.js":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.jsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport Layout from '../components/Layout';\nimport StatsCard from '../components/StatsCard';\nimport StudentTable from '../components/StudentTable';\nimport { apiClient } from '../lib/api';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Users, \n  GraduationCap, \n  Megaphone, \n  Shield,\n  TrendingUp,\n  DollarSign,\n  Bus,\n  BookOpen,\n  Calendar,\n  BarChart3\n} from 'lucide-react';\n\nexport default function AdminDashboard() {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  // Fetch dashboard stats\n  const { data: stats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: () => apiClient.get('/dashboard/stats'),\n  });\n\n  // Fetch teachers\n  const { data: teachers } = useQuery({\n    queryKey: ['/api/teachers'],\n    queryFn: () => apiClient.get('/teachers'),\n  });\n\n  // Fetch all students (admin can see all)\n  const { data: students } = useQuery({\n    queryKey: ['/api/students'],\n    queryFn: () => apiClient.get('/students'),\n  });\n\n  // Fetch audit logs\n  const { data: auditLogs } = useQuery({\n    queryKey: ['/api/audit'],\n    queryFn: () => apiClient.get('/audit'),\n  });\n\n  // Fetch announcements\n  const { data: announcements } = useQuery({\n    queryKey: ['/api/announcements'],\n    queryFn: () => apiClient.get('/announcements'),\n  });\n\n  // Mock data for additional features\n  const systemHealth = {\n    uptime: \"99.8%\",\n    performance: \"Excellent\",\n    storage: \"78% used\",\n    activeSessions: 142\n  };\n\n  const recentActivities = [\n    { action: \"New teacher registered\", user: \"admin@school.edu\", timestamp: \"2 hours ago\", type: \"user\" },\n    { action: \"Student data updated\", user: \"teacher@school.edu\", timestamp: \"3 hours ago\", type: \"data\" },\n    { action: \"System backup completed\", user: \"system\", timestamp: \"6 hours ago\", type: \"system\" },\n    { action: \"Announcement published\", user: \"admin@school.edu\", timestamp: \"1 day ago\", type: \"content\" }\n  ];\n\n  const financialOverview = [\n    { category: \"Tuition Fees\", amount: \"$125,400\", status: \"collected\", percentage: 85 },\n    { category: \"Transport Fees\", amount: \"$18,600\", status: \"pending\", percentage: 65 },\n    { category: \"Library Fees\", amount: \"$4,200\", status: \"collected\", percentage: 92 },\n    { category: \"Exam Fees\", amount: \"$8,400\", status: \"pending\", percentage: 78 }\n  ];\n\n  return (\n    <Layout title=\"Admin Dashboard\" subtitle=\"System Overview & Management\">\n      <div className=\"space-y-6\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Teachers\"\n            value={stats?.totalTeachers || 0}\n            icon={GraduationCap}\n            color=\"primary\"\n            data-testid=\"stat-total-teachers\"\n          />\n          <StatsCard\n            title=\"Total Students\"\n            value={stats?.totalStudents || 0}\n            icon={Users}\n            color=\"secondary\"\n            data-testid=\"stat-total-students\"\n          />\n          <StatsCard\n            title=\"Active Announcements\"\n            value={stats?.activeAnnouncements || 0}\n            icon={Megaphone}\n            color=\"accent\"\n            data-testid=\"stat-active-announcements\"\n          />\n          <StatsCard\n            title=\"System Health\"\n            value={stats?.systemHealth || \"Good\"}\n            icon={Shield}\n            color=\"success\"\n            isString={true}\n            data-testid=\"stat-system-health\"\n          />\n        </div>\n\n        {/* Main Admin Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"teachers\" data-testid=\"tab-teachers\">Teachers</TabsTrigger>\n            <TabsTrigger value=\"students\" data-testid=\"tab-students\">Students</TabsTrigger>\n            <TabsTrigger value=\"finance\" data-testid=\"tab-finance\">Finance</TabsTrigger>\n            <TabsTrigger value=\"system\" data-testid=\"tab-system\">System</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* System Health */}\n              <Card className=\"dashboard-card\" data-testid=\"card-system-health\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    System Health\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Uptime</span>\n                      <Badge variant=\"secondary\">{systemHealth.uptime}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Performance</span>\n                      <Badge variant=\"default\">{systemHealth.performance}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Storage</span>\n                      <Badge variant=\"outline\">{systemHealth.storage}</Badge>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm\">Active Sessions</span>\n                      <Badge variant=\"secondary\">{systemHealth.activeSessions}</Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Activities */}\n              <Card className=\"dashboard-card\" data-testid=\"card-recent-activities\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5\" />\n                    Recent Activities\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {recentActivities.map((activity, index) => (\n                      <div key={index} className=\"flex items-start space-x-3\" data-testid={`activity-${index}`}>\n                        <div className={`w-2 h-2 rounded-full mt-2 ${\n                          activity.type === 'user' ? 'bg-primary' :\n                          activity.type === 'data' ? 'bg-secondary' :\n                          activity.type === 'system' ? 'bg-accent' : 'bg-destructive'\n                        }`}></div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">{activity.action}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {activity.user} ‚Ä¢ {activity.timestamp}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Admin Actions */}\n            <Card className=\"dashboard-card\" data-testid=\"card-admin-actions\">\n              <CardHeader>\n                <CardTitle>Quick Admin Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"button-manage-teachers\">\n                    <GraduationCap className=\"w-6 h-6\" />\n                    <span className=\"text-sm\">Manage Teachers</span>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"button-system-reports\">\n                    <BarChart3 className=\"w-6 h-6\" />\n                    <span className=\"text-sm\">System Reports</span>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"button-announcements\">\n                    <Megaphone className=\"w-6 h-6\" />\n                    <span className=\"text-sm\">Announcements</span>\n                  </Button>\n                  <Button variant=\"outline\" className=\"h-20 flex flex-col gap-2\" data-testid=\"button-fee-management\">\n                    <DollarSign className=\"w-6 h-6\" />\n                    <span className=\"text-sm\">Fee Management</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"teachers\" className=\"space-y-6\">\n            <Card data-testid=\"card-teachers-management\">\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <CardTitle>Teacher Management</CardTitle>\n                  <Button data-testid=\"button-add-teacher\">Add New Teacher</Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {teachers && teachers.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {teachers.map((teacher, index) => (\n                      <div key={teacher.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`teacher-${index}`}>\n                        <div>\n                          <p className=\"font-medium\">{teacher.email}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Status: {teacher.isActive ? 'Active' : 'Inactive'}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-teacher-${index}`}>\n                            Edit\n                          </Button>\n                          <Button variant=\"destructive\" size=\"sm\" data-testid={`button-delete-teacher-${index}`}>\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-teachers\">\n                    No teachers found. Add your first teacher to get started.\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"students\" className=\"space-y-6\">\n            <Card data-testid=\"card-students-management\">\n              <CardHeader>\n                <CardTitle>Student Management</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {students ? (\n                  <StudentTable students={students} isAdmin={true} />\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-students\">\n                    Loading students...\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"finance\" className=\"space-y-6\">\n            <Card data-testid=\"card-financial-overview\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"w-5 h-5\" />\n                  Financial Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {financialOverview.map((item, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`finance-item-${index}`}>\n                      <div>\n                        <p className=\"font-medium\">{item.category}</p>\n                        <p className=\"text-sm text-muted-foreground\">{item.percentage}% collection rate</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold text-lg\">{item.amount}</p>\n                        <Badge variant={item.status === 'collected' ? 'default' : 'outline'}>\n                          {item.status}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"system\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Audit Logs */}\n              <Card data-testid=\"card-audit-logs\">\n                <CardHeader>\n                  <CardTitle>Recent Audit Logs</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {auditLogs && auditLogs.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {auditLogs.slice(0, 10).map((log, index) => (\n                        <div key={log.id} className=\"text-sm border-b pb-2\" data-testid={`audit-log-${index}`}>\n                          <p className=\"font-medium\">{log.action}</p>\n                          <p className=\"text-muted-foreground text-xs\">\n                            {new Date(log.createdAt).toLocaleString()}\n                          </p>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-audit-logs\">\n                      No audit logs available.\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* System Management */}\n              <Card data-testid=\"card-system-management\">\n                <CardHeader>\n                  <CardTitle>System Management</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-backup-data\">\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Backup Data\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-export-reports\">\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      Export Reports\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-system-settings\">\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      System Settings\n                    </Button>\n                    <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"button-user-permissions\">\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      User Permissions\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":15564},"client/src/pages/Login.jsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '../lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { BookOpen, Users, Settings } from 'lucide-react';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login, registerAdmin, user } = useAuth();\n  const { toast } = useToast();\n  \n  const [loginForm, setLoginForm] = useState({ email: '', password: '' });\n  const [adminForm, setAdminForm] = useState({ email: '', password: '' });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Redirect if already logged in\n  if (user) {\n    const dashboardPath = user.role === 'admin' ? '/admin-dashboard' : '/teacher-dashboard';\n    setLocation(dashboardPath);\n    return null;\n  }\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    const result = await login(loginForm.email, loginForm.password);\n    \n    if (result.success) {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back to EduManage!\",\n      });\n      \n      // Redirect based on role - will be handled by auth context update\n    } else {\n      setError(result.error);\n    }\n    \n    setLoading(false);\n  };\n\n  const handleAdminRegister = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n\n    const result = await registerAdmin(adminForm.email, adminForm.password);\n    \n    if (result.success) {\n      toast({\n        title: \"Admin Registered\",\n        description: \"Admin account created successfully. You can now login.\",\n      });\n      setAdminForm({ email: '', password: '' });\n    } else {\n      setError(result.error);\n    }\n    \n    setLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/10 via-background to-secondary/10 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Logo and Title */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n              <BookOpen className=\"w-7 h-7 text-primary-foreground\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground\">EduManage</h1>\n          <p className=\"text-muted-foreground\">School Management System</p>\n        </div>\n\n        <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n            <TabsTrigger value=\"admin-setup\" data-testid=\"tab-admin-setup\">Admin Setup</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"login\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Sign In\n                </CardTitle>\n                <CardDescription>\n                  Enter your credentials to access your dashboard\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  {error && (\n                    <Alert variant=\"destructive\">\n                      <AlertDescription>{error}</AlertDescription>\n                    </Alert>\n                  )}\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" data-testid=\"label-email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={loginForm.email}\n                      onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}\n                      required\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      placeholder=\"Enter your password\"\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      required\n                      data-testid=\"input-password\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={loading}\n                    data-testid=\"button-login\"\n                  >\n                    {loading ? \"Signing In...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          \n          <TabsContent value=\"admin-setup\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"w-5 h-5\" />\n                  Admin Setup\n                </CardTitle>\n                <CardDescription>\n                  Create the first admin account for your school\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleAdminRegister} className=\"space-y-4\">\n                  {error && (\n                    <Alert variant=\"destructive\">\n                      <AlertDescription>{error}</AlertDescription>\n                    </Alert>\n                  )}\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"admin-email\" data-testid=\"label-admin-email\">Admin Email</Label>\n                    <Input\n                      id=\"admin-email\"\n                      type=\"email\"\n                      placeholder=\"admin@school.edu\"\n                      value={adminForm.email}\n                      onChange={(e) => setAdminForm({ ...adminForm, email: e.target.value })}\n                      required\n                      data-testid=\"input-admin-email\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"admin-password\" data-testid=\"label-admin-password\">Password</Label>\n                    <Input\n                      id=\"admin-password\"\n                      type=\"password\"\n                      placeholder=\"Create a secure password\"\n                      value={adminForm.password}\n                      onChange={(e) => setAdminForm({ ...adminForm, password: e.target.value })}\n                      required\n                      minLength={6}\n                      data-testid=\"input-admin-password\"\n                    />\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={loading}\n                    data-testid=\"button-register-admin\"\n                  >\n                    {loading ? \"Creating Admin...\" : \"Create Admin Account\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Features */}\n        <div className=\"mt-8 text-center text-sm text-muted-foreground\">\n          <p>‚úì Teacher & Student Management</p>\n          <p>‚úì Attendance & Grade Tracking</p>\n          <p>‚úì WhatsApp Integration</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8193},"client/src/pages/TeacherDashboard.jsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport Layout from '../components/Layout';\nimport StatsCard from '../components/StatsCard';\nimport { apiClient } from '../lib/api';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Users, \n  CheckCircle, \n  AlertCircle, \n  Calendar,\n  Clock,\n  MapPin,\n  TrendingUp,\n  MessageSquare,\n  FileText,\n  BookOpen\n} from 'lucide-react';\n\nexport default function TeacherDashboard() {\n  const [selectedClass, setSelectedClass] = useState(\"Grade 10-A\");\n\n  // Fetch dashboard stats\n  const { data: stats } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    queryFn: () => apiClient.get('/dashboard/stats'),\n  });\n\n  // Fetch students\n  const { data: students } = useQuery({\n    queryKey: ['/api/students'],\n    queryFn: () => apiClient.get('/students'),\n  });\n\n  // Fetch assignments\n  const { data: assignments } = useQuery({\n    queryKey: ['/api/assignments'],\n    queryFn: () => apiClient.get('/assignments'),\n  });\n\n  // Mock data for UI (replace with real API calls)\n  const todaySchedule = [\n    { subject: \"Mathematics\", grade: \"Grade 10-A\", time: \"9:00 AM\", room: \"Room 101\" },\n    { subject: \"Physics\", grade: \"Grade 11-B\", time: \"11:30 AM\", room: \"Lab 2\" },\n    { subject: \"Chemistry\", grade: \"Grade 12-A\", time: \"2:00 PM\", room: \"Lab 1\" }\n  ];\n\n  const recentActivity = [\n    { description: \"Assignment submitted by John Smith\", timestamp: \"2 hours ago\", type: \"submission\" },\n    { description: \"Attendance marked for Grade 10-A\", timestamp: \"3 hours ago\", type: \"attendance\" },\n    { description: \"Parent message received\", timestamp: \"5 hours ago\", type: \"message\" },\n    { description: \"Exam scheduled for next week\", timestamp: \"1 day ago\", type: \"exam\" }\n  ];\n\n  const studentPerformance = [\n    { name: \"John Smith\", initials: \"JS\", grade: \"A\", percentage: 95, lastSubmission: \"2 days ago\" },\n    { name: \"Emma Miller\", initials: \"EM\", grade: \"B+\", percentage: 87, lastSubmission: \"1 day ago\" },\n    { name: \"Michael Johnson\", initials: \"MJ\", grade: \"B\", percentage: 82, lastSubmission: \"3 days ago\" }\n  ];\n\n  const upcomingEvents = [\n    {\n      title: \"Parent-Teacher Conference\",\n      date: \"March 15, 2024 - 2:00 PM\",\n      description: \"Individual meetings scheduled with parents to discuss student progress and academic performance.\",\n      type: \"Meeting\"\n    },\n    {\n      title: \"Mid-term Examinations\",\n      date: \"March 20-25, 2024\",\n      description: \"Mid-term examination schedule for all grades. Exam timetables have been shared with students.\",\n      type: \"Exam\"\n    },\n    {\n      title: \"Science Fair 2024\",\n      date: \"April 5, 2024 - 10:00 AM\",\n      description: \"Annual science fair showcasing student projects and experiments across all grade levels.\",\n      type: \"Event\"\n    }\n  ];\n\n  const handleQuickAction = (action) => {\n    console.log(`Quick action triggered: ${action}`);\n    // TODO: Implement specific quick action functionality\n  };\n\n  return (\n    <Layout title=\"Teacher Dashboard\" subtitle=\"Welcome back\">\n      <div className=\"space-y-6\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Total Students\"\n            value={stats?.totalStudents || 0}\n            icon={Users}\n            color=\"primary\"\n            data-testid=\"stat-total-students\"\n          />\n          <StatsCard\n            title=\"Present Today\"\n            value={stats?.presentToday || 0}\n            icon={CheckCircle}\n            color=\"secondary\"\n            data-testid=\"stat-present-today\"\n          />\n          <StatsCard\n            title=\"Pending Assignments\"\n            value={stats?.pendingAssignments || 0}\n            icon={AlertCircle}\n            color=\"destructive\"\n            data-testid=\"stat-pending-assignments\"\n          />\n          <StatsCard\n            title=\"Today's Classes\"\n            value={stats?.todayClasses || 0}\n            icon={Calendar}\n            color=\"accent\"\n            data-testid=\"stat-today-classes\"\n          />\n        </div>\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Today's Schedule */}\n          <Card className=\"dashboard-card\" data-testid=\"card-today-schedule\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Today's Schedule</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-schedule\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {todaySchedule.map((classItem, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\" data-testid={`schedule-item-${index}`}>\n                    <div>\n                      <p className=\"font-medium\">{classItem.subject}</p>\n                      <p className=\"text-sm text-muted-foreground\">{classItem.grade}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"flex items-center gap-1 text-sm font-medium\">\n                        <Clock className=\"w-3 h-3\" />\n                        {classItem.time}\n                      </div>\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                        <MapPin className=\"w-3 h-3\" />\n                        {classItem.room}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card className=\"dashboard-card\" data-testid=\"card-recent-activity\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Recent Activity</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-activity\">\n                  View All\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity, index) => (\n                  <div key={index} className=\"flex items-start space-x-3\" data-testid={`activity-item-${index}`}>\n                    <div className={`w-2 h-2 rounded-full mt-2 ${\n                      activity.type === 'submission' ? 'bg-primary' :\n                      activity.type === 'attendance' ? 'bg-secondary' :\n                      activity.type === 'message' ? 'bg-destructive' : 'bg-accent'\n                    }`}></div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">{activity.description}</p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.timestamp}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"dashboard-card\" data-testid=\"card-quick-actions\">\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-center gap-2 hover:bg-accent transition-colors\"\n                  onClick={() => handleQuickAction(\"Mark Attendance\")}\n                  data-testid=\"button-mark-attendance\"\n                >\n                  <CheckCircle className=\"w-6 h-6 text-primary\" />\n                  <span className=\"text-sm font-medium\">Mark Attendance</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-center gap-2 hover:bg-accent transition-colors\"\n                  onClick={() => handleQuickAction(\"Create Assignment\")}\n                  data-testid=\"button-create-assignment\"\n                >\n                  <FileText className=\"w-6 h-6 text-primary\" />\n                  <span className=\"text-sm font-medium\">Create Assignment</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-center gap-2 hover:bg-accent transition-colors\"\n                  onClick={() => handleQuickAction(\"Send Message\")}\n                  data-testid=\"button-send-message\"\n                >\n                  <MessageSquare className=\"w-6 h-6 text-primary\" />\n                  <span className=\"text-sm font-medium\">Send Message</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-center gap-2 hover:bg-accent transition-colors\"\n                  onClick={() => handleQuickAction(\"Grade Students\")}\n                  data-testid=\"button-grade-students\"\n                >\n                  <TrendingUp className=\"w-6 h-6 text-primary\" />\n                  <span className=\"text-sm font-medium\">Grade Students</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Additional Sections */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Student Performance Overview */}\n          <Card className=\"dashboard-card\" data-testid=\"card-student-performance\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Student Performance Overview</CardTitle>\n                <select \n                  className=\"text-sm border border-border rounded px-2 py-1\"\n                  value={selectedClass}\n                  onChange={(e) => setSelectedClass(e.target.value)}\n                  data-testid=\"select-class\"\n                >\n                  <option>Grade 10-A</option>\n                  <option>Grade 11-B</option>\n                  <option>Grade 12-A</option>\n                </select>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {studentPerformance.map((student, index) => (\n                  <div key={index} className=\"flex items-center justify-between\" data-testid={`student-performance-${index}`}>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        student.percentage >= 90 ? 'bg-primary' :\n                        student.percentage >= 80 ? 'bg-secondary' : 'bg-accent'\n                      }`}>\n                        <span className=\"text-xs font-medium text-white\">{student.initials}</span>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium\">{student.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">Last submission: {student.lastSubmission}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">{student.grade}</p>\n                        <p className=\"text-xs text-muted-foreground\">{student.percentage}%</p>\n                      </div>\n                      <div className=\"w-12\">\n                        <Progress value={student.percentage} className=\"h-2\" />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Upcoming Events & Announcements */}\n          <Card className=\"dashboard-card\" data-testid=\"card-upcoming-events\">\n            <CardHeader>\n              <CardTitle>Upcoming Events & Announcements</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {upcomingEvents.map((event, index) => (\n                  <div key={index} className=\"border border-border rounded-lg p-4\" data-testid={`event-item-${index}`}>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{event.title}</p>\n                        <p className=\"text-xs text-muted-foreground mb-2\">{event.date}</p>\n                        <p className=\"text-xs\">{event.description}</p>\n                      </div>\n                      <Badge \n                        variant={\n                          event.type === 'Meeting' ? 'default' :\n                          event.type === 'Exam' ? 'destructive' : 'secondary'\n                        }\n                        className=\"text-xs\"\n                      >\n                        {event.type}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":13521},"client/src/pages/not-found.jsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.jsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef(\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef(\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef(\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1480},"client/src/components/ui/alert-dialog.jsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef(\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef(\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef(\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef(\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef(\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef(\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":3430},"client/src/components/ui/alert.jsx":{"content":"import * as React from \"react\"\nimport { cva} from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef(\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef(\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1441},"client/src/components/ui/aspect-ratio.jsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef(\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef(\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef(\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":962},"client/src/components/ui/badge.jsx":{"content":"import * as React from \"react\"\nimport { cva} from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1108},"client/src/components/ui/breadcrumb.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef(\n  HTMLElement,\n    separator?: React.ReactNode\n  }\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef(\n  HTMLOListElement,\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef(\n  HTMLLIElement,\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef(\n  HTMLAnchorElement,\n    asChild?: boolean\n  }\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef(\n  HTMLSpanElement,\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2267},"client/src/components/ui/button.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva} from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef(HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1881},"client/src/components/ui/calendar.jsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1630},"client/src/components/ui/carousel.jsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef(\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef(\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":5983},"client/src/components/ui/chart.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10415},"client/src/components/ui/checkbox.jsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef(\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":903},"client/src/components/ui/collapsible.jsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.jsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef(\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef(\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef(\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef(\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef(\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef(\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef(\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":3840},"client/src/components/ui/context-menu.jsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef(\n    inset?: boolean\n  }\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef(\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef(\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef(\n    inset?: boolean\n  }\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef(\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef(\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef(\n    inset?: boolean\n  }\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef(\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":6016},"client/src/components/ui/dialog.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef(\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef(\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef(\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef(\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3214},"client/src/components/ui/drawer.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef(\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef(\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef(\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef(\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":2387},"client/src/components/ui/dropdown-menu.jsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef(\n    inset?: boolean\n  }\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef(\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef(\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef(\n    inset?: boolean\n  }\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef(\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef(\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef(\n    inset?: boolean\n  }\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef(\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":6165},"client/src/components/ui/form.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef(\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef(\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef(\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef(\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef(\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":3733},"client/src/components/ui/hover-card.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef(\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1056},"client/src/components/ui/input-otp.jsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef(\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef(\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef(\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef(\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":1678},"client/src/components/ui/input.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef(HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.jsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva} from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(\n    VariantProps<typeof labelVariants>\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":541},"client/src/components/ui/menubar.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef(\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef(\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef(\n    inset?: boolean\n  }\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef(\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef(\n    inset?: boolean\n  }\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef(\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef(\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef(\n    inset?: boolean\n  }\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef(\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":6984},"client/src/components/ui/navigation-menu.jsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef(\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef(\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef(\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef(\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef(\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef(\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":4088},"client/src/components/ui/pagination.jsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef(\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef(\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2675},"client/src/components/ui/popover.jsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef(\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1089},"client/src/components/ui/progress.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef(\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":631},"client/src/components/ui/radio-group.jsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef(\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef(\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1153},"client/src/components/ui/resizable.jsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.jsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef(\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef(\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1262},"client/src/components/ui/select.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef(\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef(\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef(\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":4580},"client/src/components/ui/separator.jsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":636},"client/src/components/ui/sheet.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva} from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef(\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef(\n  SheetContentProps\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef(\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef(\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":3683},"client/src/components/ui/sidebar.jsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef(\n  React.ComponentProps<typeof Button>\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef(\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef(\n  React.ComponentProps<typeof Input>\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef(\n  React.ComponentProps<typeof Separator>\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef(\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef(\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef(\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef(\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef(\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef(\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef(\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef(\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef(\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":22536},"client/src/components/ui/skeleton.jsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.jsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef(\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":928},"client/src/components/ui/switch.jsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef(\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":988},"client/src/components/ui/table.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef(\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef(\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef(\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef(\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef(\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef(\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef(\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef(\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2461},"client/src/components/ui/tabs.jsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef(\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef(\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef(\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1436},"client/src/components/ui/textarea.jsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef(\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":651},"client/src/components/ui/toast.jsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef(({ className, variant, ...props }, ref) => (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n))\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\nexport {\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":3880},"client/src/components/ui/toaster.jsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef(\n    VariantProps<typeof toggleVariants>\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef(\n    VariantProps<typeof toggleVariants>\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1377},"client/src/components/ui/toggle.jsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva} from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef(\n    VariantProps<typeof toggleVariants>\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1341},"client/src/components/ui/tooltip.jsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1087}},"version":1}