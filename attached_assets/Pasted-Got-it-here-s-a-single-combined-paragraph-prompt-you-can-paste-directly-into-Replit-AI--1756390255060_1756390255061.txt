Got it üëç ‚Äî here‚Äôs a **single combined paragraph prompt** you can paste directly into **Replit AI** to generate your project:

---

Create a full-stack secure backend + React (Vite) frontend project using only `.js` and `.jsx` files (no TypeScript). The backend should be Node.js + Express, connected to Supabase Postgres using the `pg` driver with parameterized queries only. Use environment variables (never hardcode secrets). Implement authentication with Argon2 password hashing and JWT access + refresh tokens stored securely (refresh tokens hashed in DB, set as HttpOnly, Secure, SameSite=strict cookies). Add RBAC with `admin` and `teacher` roles. Apply security middleware: `helmet`, CORS (configurable origin), `express-rate-limit`, CSRF protection (double-submit cookie + `x-csrf-token` header), zod validation for all request bodies, centralized error handling, audit logging of sensitive actions, and SSL connections with rejectUnauthorized. Database schema includes `users` (id, email, password\_hash, role, is\_active, timestamps), `refresh_tokens`, `modules` (teacher\_id, module\_name, status, notes, updated\_at), `audit_logs` (action, meta, ip, timestamps), and `students` (id, teacher\_id, roll\_no, name, student\_number, parent\_number1, parent\_number2, extra\_info JSONB, timestamps). Features: admin can manage teachers (CRUD), view audit logs, and manage all students; teacher can log/update their own modules, manage their own students (CRUD), and view their own profile. API endpoints: `/api/auth/register-admin`, `/api/auth/login`, `/api/auth/refresh`, `/api/auth/logout`, `/api/users/me`, `/api/teachers` (CRUD, admin only), `/api/modules` (teacher), `/api/audit` (admin only), and full CRUD for `/api/students` (admin global, teacher scoped to own). React client (Vite + JSX only) with TailwindCSS + shadcn/ui: `Login.jsx`, `AdminDashboard.jsx`, `TeacherDashboard.jsx`, components `Nav.jsx`, `StudentTable.jsx`, `StudentForm.jsx`, `ModuleForm.jsx`, and an `api.js` wrapper that attaches JWT access token and CSRF headers, auto-refreshes on 401. Professional UI: modern navbar, responsive dashboards, clean tables with hover effects, modals for add/edit student, toast notifications for success/error, forms with proper labels and validation. Bootstrap first admin via `/api/auth/register-admin` if no admin exists. Include README.md with setup instructions, `.env.example`, DB init script, security notes, and npm scripts (`dev`, `db:init`, etc.).

---

Do you want me to also make this **shorter version** (compressed but same meaning) so Replit AI doesn‚Äôt time out when generating?
